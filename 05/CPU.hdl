// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.
           DMux(in=true, sel=instruction[15], a=instA, b=instD);
           Or(a=instA, b=instruction[5], out=loadRegA); // because it requires 0 or 1
           And(a=instD, b=instruction[4], out=loadRegD);// because it requires 1 in both

           Mux16(a=outALU ,b=instruction ,sel=instA ,out=mux16Out1 );
           ARegister(in=mux16Out1 ,load=loadRegA ,out=outAreg ,out[0..14]=addressM );

           Mux16(a=outAreg ,b=inM ,sel=instruction[12] ,out=mux16Out2 );
           DRegister(in=outALU ,load=loadRegD ,out=outDreg );
           ALU(x=outDreg ,y=mux16Out2 ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outALU ,out=outM ,zr=zr ,ng=ng );

           Or(a=zr ,b=ng ,out=zrORng );
           Not(in=zrORng ,out=pos ) ;

           And(a=instruction[0] ,b=pos ,out=JGT );
           And(a=instruction[1] ,b=zr ,out=JEQ );
           And(a=instruction[2] ,b=ng ,out=JLT );
           Or(a=JLT ,b=JEQ ,out=JLE );
           Or(a=JLE ,b=JGT ,out=JMP );
           //Or(a=JEQ ,b=JGT ,out=JGE ); // we have it already
           //Or(a=JLT ,b=JGT ,out=JNE ); // we have it already
           // dont need JLE because it's included in JMP

           And(a=instD ,b=JMP ,out=realyJMP );
           PC(in=outAreg ,load=realyJMP ,inc=true ,reset=reset ,out[0..14]=pc );

           And(a=instD, b=instruction[3], out=writeM);

}
